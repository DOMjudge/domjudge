imports:
    - { resource: parameters.yml }
    - { resource: static.yml }
    - { resource: security.yml }
    - { resource: services.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en

framework:
    #esi: ~
    #translator: { fallbacks: ['%locale%'] }
    secret: '%secret%'
    router:
        resource: '%kernel.root_dir%/config/routing.yml'
        strict_requirements: ~
    form: ~
    csrf_protection: ~
    validation: { enable_annotations: true }
    #serializer: { enable_annotations: true }
    default_locale: '%locale%'
    trusted_hosts: ~
    session:
        # https://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id: session.handler.native_file
        save_path: '%kernel.root_dir%/../var/sessions/%kernel.environment%'
    fragments: ~
    http_method_override: true
    assets:
        version: "v=%domjudge.version%"
    php_errors:
        log: true

# Twig Configuration
twig:
    debug: '%kernel.debug%'
    strict_variables: '%kernel.debug%'
    auto_reload: true
    form_themes: ['form_theme.html.twig']
    globals:
        DOMJUDGE_VERSION: '%domjudge.version%'
        DJ_CHARACTER_SET: 'utf-8'
# Doctrine Configuration
doctrine:
    dbal:
        driver: pdo_mysql
        host: '%database_host%'
        port: '%database_port%'
        dbname: '%database_name%'
        user: '%database_user%'
        password: '%database_password%'
        charset: utf8mb4
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: '%kernel.root_dir%/../var/data/data.sqlite'
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #path: '%database_path%'

    orm:
        auto_generate_proxy_classes: '%kernel.debug%'
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true
        mappings:
            DOMJudgeBundle: ~
        dql:
            string_functions:
                truncate: DOMJudgeBundle\Doctrine\ORM\Query\AST\Functions\TruncateFunction

# We need this to make our @View annotations work for FOSRest
sensio_framework_extra:
    view:
        annotations: true
    router:
        annotations: false

# Pretty print json please!
jms_serializer:
    visitors:
        json_serialization:
            options: JSON_PRETTY_PRINT
        json_deserialization:
            options: JSON_PRETTY_PRINT
fos_rest:
    zone:
        - { path: ^/api/* }
    disable_csrf_role: ROLE_API
    view:
        # Lets us return data directly, instead of wrapping in a view
        view_response_listener: force
    serializer:
        serialize_null: true
    exception:
        enabled: true
        exception_controller: 'fos_rest.exception.controller:showAction'
        messages:
                Symfony\Component\HttpKernel\Exception\BadRequestHttpException: true
                Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException: true
                Symfony\Component\HttpKernel\Exception\NotAcceptableHttpException: true
                Symfony\Component\HttpKernel\Exception\NotFoundHttpException: true
                Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException: true

nelmio_api_doc:
    areas:
        path_patterns: [ ^/api/v4 ]
    documentation:
        info:
            title: DOMjudge
            description: DOMjudge API v4
            version: "%domjudge.version%"
        securityDefinitions:
            BasicAuth:
                type: basic
        consumes:
            - application/x-www-form-urlencoded
        security:
            - {}
            - BasicAuth: []
        definitions:
            # General responses
            NotFound:
                description: The specified resource was not found
            Unauthorized:
                description: Unauthorized
            # Models that can not be exposed using normal entities
            ContestProblem: # ContestProblem can not be exposed normally, because it inlines the problem
                properties:
                    id: { type: string }
                    label: { type: string }
                    short_name: { type: string }
                    name: { type: string }
                    ordinal: { type: integer }
                    rgb: { type: string }
                    color: { type: string }
                    time_limit: { type: number, format: float }
                    test_data_count: { type: integer }
            # Files and ArchiveList are used for defining the 'files' property of submissions
            Files:
                properties:
                    files:
                        $ref: "#/definitions/ArchiveList"
            ArchiveList:
                type: array
                items:
                    type: object
                    properties:
                        href: { type: string }
            SourceCodeList:
                type: array
                items:
                    type: object
                    properties:
                        id: { type: string }
                        submission_id: { type: string }
                        filename: { type: string, description: 'Original file name' }
                        source: { type: string, description: 'Base64-encoded source code' }
            # Judgement type does not have an entity
            JudgementType:
                type: object
                properties:
                    id: { type: string }
                    name: { type: string }
                    penalty: { type: boolean }
                    solved: { type: boolean }
            # Fields for judgements that are added by the JudgingWrapper class
            JudgementExtraFields:
                properties:
                    judgement_type_id: { type: string }
                    judgehost: { type: string }
                    max_run_time: { type: number, format: float }
            # Fields for runs that are added by the JudgingRunWrapper class
            RunExtraFields:
                properties:
                    judgement_type_id: { type: string }
            Scoreboard:
                type: object
                properties:
                    event_id: { type: string }
                    time: { type: string }
                    contest_time: { type: string }
                    state: { $ref: "#/definitions/ContestState" }
                    rows:
                        type: array
                        items:
                            type: object
                            properties:
                                rank: { type: integer }
                                team_id: { type: string }
                                score:
                                    type: object
                                    properties:
                                        num_solved: { type: integer }
                                        total_time: { type: integer }
                                problems:
                                    type: array
                                    items:
                                        type: object
                                        properties:
                                            label: { type: string }
                                            problem_id: { type: string }
                                            num_judged: { type: integer }
                                            num_pending: { type: integer }
                                            solved: { type: boolean }
                                            time: { type: integer }
            NextJudging:
                type: object
                properties:
                    judgingid: { type: integer }
                    submitid: { type: integer }
                    cid: { type: integer }
                    teamid: { type: integer }
                    probid: { type: integer }
                    langid: { type: string }
                    rejudgingid: { type: integer }
                    entry_point: { type: string }
                    origsubmitid: { type: integer }
                    maxruntime: { type: number, format: float }
                    memlimit: { type: integer }
                    outputlimit: { type: integer }
                    run: { type: string }
                    compare: { type: string }
                    compare_args: { type: string }
                    compile_script: { type: string }
                    compare_md5sum: { type: string }
                    run_md5sum: { type: string }
                    compile_script_md5sum: { type: string }
                    testcases:
                        type: array
                        items:
                            type: object
                            properties:
                                md5sum_input: { type: string }
                                md5sum_output: { type: string }
                                testcaseid: { type: integer}
                                rank: { type: integer }
            ContestState:
                type: object
                properties:
                    started: { type: string, format: date-time }
                    ended: { type: string, format: date-time }
                    frozen: { type: string, format: date-time }
                    thawed: { type: string, format: date-time }
                    finalized: { type: string, format: date-time }
                    end_of_updates: { type: string, format: date-time }
            Award:
                type: object
                properties:
                    id: { type: string }
                    citation: { type: string }
                    team_ids:
                        type: array
                        items: { type: string }
        parameters:
            cid:
                name: cid
                in: path
                type: string
                description: The contest ID
                required: true
            id:
                name: id
                in: path
                type: string
                description: The ID of the entity to get
                required: true
            idlist:
                name: ids[]
                in: query
                type: array
                description: Filter the objects to get on this list of ID's
                collectionFormat: multi
                items:
                    type: string
                    description: A single ID
