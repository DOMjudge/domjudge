# Global Makefile
#
# Put here all things that need or can be defined globally, like
# standard targets (clean, etc.) and global variables.

# Prevent this file from being included more than once
ifndef GLOBALINCLUDED
GLOBALINCLUDED=1

# Check for QUIET environment variable:
ifneq ($(QUIET),)
export QUIET=1
MAKEFLAGS += --no-print-directory --quiet
endif

# Define the 'default' target here: because of inclusion of this file,
# it will be the default target in all subdirectories and we default to
# no automatic targets when calling 'make' unless overridden.
default:

# Include variables set by configure:
ifneq ($(wildcard $(TOPDIR)/paths.mk),)
include $(TOPDIR)/paths.mk
endif

# We should build docs if it not explicitly disabled and we're not
# running "make maintainer-conf" or "make inplace-conf":
BUILD_DOCS=no
ifneq ($(DOC_BUILD_ENABLED),no)
ifneq ($(MAKECMDGOALS),maintainer-conf)
ifneq ($(MAKECMDGOALS),inplace-conf)
BUILD_DOCS=yes
endif
endif
endif
export BUILD_DOCS

# Determine revision info:
REVISION = $(shell \
if [ -n "$(PUBLISHED)" ]; then \
	echo "$(PUBLISHED)" ; \
elif git describe >/dev/null 2>&1 ; then \
	git describe --long | sed 's/^.*-//' ; \
else \
	echo 'unknown' ; \
fi )
CFLAGS   += -DREVISION="\"$(REVISION)\""
CXXFLAGS += -DREVISION="\"$(REVISION)\""

USER_EXISTS:=$(shell id $(DOMJUDGE_USER) 2>/dev/null >/dev/null; echo $$?)

# Install settings
INSTALL_PROG    = $(INSTALL)
INSTALL_DATA    = $(INSTALL) -m 0644
ifeq ($(USER_EXISTS),0)
INSTALL_USER    = $(INSTALL) -m 0644 -o $(DOMJUDGE_USER)
INSTALL_WEBSITE = $(INSTALL) -m 0644 -o $(DOMJUDGE_USER) -g $(WEBSERVER_GROUP)
else
# This makes sure we still create things, even if the user doesn't exist
INSTALL_USER    = $(INSTALL) -m 0644
INSTALL_WEBSITE = $(INSTALL) -m 0644
endif
INSTALL_DIR     = $(INSTALL) -d
# KLUDGE: how to install a tree of files with correct permissions?
define install_tree
	cp    -R -t   $(1) $(2) ; \
	chmod -R a+rX $(1)/`basename $(2)`
endef

# Library objects required in multiple places:
LIBSBASE   = $(addprefix $(TOPDIR)/lib/,lib.error lib.misc)
LIBHEADERS = $(addsuffix .h,$(LIBSBASE))
LIBSOURCES = $(addsuffix .c,$(LIBSBASE))
LIBOBJECTS = $(addsuffix $(OBJEXT),$(LIBSBASE))
CFLAGS   += -I$(TOPDIR)/lib -I$(TOPDIR)/etc
CXXFLAGS += -I$(TOPDIR)/lib -I$(TOPDIR)/etc

$(LIBOBJECTS): %$(OBJEXT): %.c %.h
	$(MAKE) -C $(TOPDIR)/lib $(notdir $@)

# Default recursive targets; these should always at least call the
# TARGET-l variant:
REC_TARGETS += dist clean distclean maintainer-clean

# Recursive rule, runs in depth-first traversal. TARGET-l is the local
# variant that is called after traversing all subdirectories.
$(REC_TARGETS): %:
	@[ -n "$(QUIET)" -o -z "$(SUBDIRS)" ] || echo "Recursing target \`$@' into:" $(SUBDIRS)
	@for dir in $(SUBDIRS) ; do $(MAKE) -C $$dir $@ || exit 1 ; done
	@$(MAKE) $@-l

# Predefine local variants of recursive targets, so that they are
# available from the above call:
dist-l:

clean-l:

distclean-l: clean-l

maintainer-clean-l: distclean-l

.PHONY: default $(REC_TARGETS) $(addsuffix -l,$(REC_TARGETS)) check config \
        clean clean-l distclean distclean-l maintainer-clean maintainer-clean-l

endif # GLOBALINCLUDED

# Local Variables:
# mode: makefile
# end:
