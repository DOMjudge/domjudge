<?php declare(strict_types=1);
/**
 * @configure_input@
 *
 * Document relations between DOMjudge tables for various use.
 * The data is extracted from the SQL DB structure file.
 */

/** For each table specify the set of attributes that together
 *  are considered the primary key / superkey. */
$KEYS = array(
// @KEYS@
);

/** For each table, list all attributes that reference foreign keys
 *  and specify the source of that key. Appended to the
 *  foreign key is '&<ACTION>' where ACTION can be any of the
 *  following referential actions on delete of the foreign row:
 *  CASCADE:  also delete the source row
 *  SETNULL:  set source key to NULL
 *  RESTRICT: disallow delete of foreign row
 *  NOCONSTRAINT: no constraint is specified, even though the field
 *                references a foreign key.
 */
$RELATIONS = array(
// @RELATIONS@
);

// Additional relations not encoded in the SQL structure:
$RELATIONS['clarification']['sender']    = 'team.teamid&NOCONSTRAINT';
$RELATIONS['clarification']['recipient'] = 'team.teamid&NOCONSTRAINT';

/**
 * Check whether some primary key is referenced in any
 * table as a foreign key.
 *
 * Returns an array "table name => action" of matches found.
 */
function fk_check(string $keyfield, $value) : array
{
    global $RELATIONS, $DB;

    $ret = array();
    foreach ($RELATIONS as $table => $table_rels) {
        foreach ($table_rels as $column => $constraint) {
            @list($foreign, $action) = explode('&', $constraint);
            if (empty($action)) {
                $action = 'CASCADE';
            }
            if ($foreign == $keyfield) {
                $c = $DB->q("VALUE SELECT count(*) FROM $table WHERE $column = %s", $value);
                if ($c > 0) {
                    $ret[$table] = $action;
                }
            }
        }
    }

    return $ret;
}

/**
 * Find all dependent tables that a delete could cascade into.
 *
 * Returns an array of table names.
 */
function fk_dependent_tables(string $table) : array
{
    global $RELATIONS;

    $ret = array();
    // We do a BFS through the list of tables.
    $queue = array($table);
    while (count($queue)>0) {
        $curr_table = reset($queue);
        unset($queue[array_search($curr_table, $queue)]);

        if (in_array($curr_table, $ret)) {
            continue;
        }
        if ($curr_table!=$table) {
            $ret[] = $curr_table;
        }

        foreach ($RELATIONS as $next_table => $table_rels) {
            foreach ($table_rels as $constraint) {
                @list($foreign, $action) = explode('&', $constraint);
                @list($foreign_table, $foreign_key) = explode('.', $foreign);
                if (empty($action)) {
                    $action = 'CASCADE';
                }
                if ($foreign_table==$curr_table && $action=='CASCADE') {
                    $queue[] = $next_table;
                }
            }
        }
    }

    return $ret;
}

/**
 * Given a table and column,value pair, find all rows in that table
 * where column=value and recursively any dependent rows in tables
 * that reference those. $depth is an internal variable.
 *
 * Returns in $results an array of tuples [tablename, [key => value, ...]].
 * The results are ordered such that referential integrity is
 * preserved if they are deleted as given.
 */
function fk_dependent_rows(array &$results, string $table, string $column, $value, int $depth = 0)
{
    global $RELATIONS, $KEYS, $DB;

    if (!array_key_exists($table, $KEYS)) {
        error("invalid table '$table'");
    }
    if ($depth>=10) {
        error("fk_dependent_rows recursion depth exceeded at $depth");
    }

    $keys = $KEYS[$table];
    $rows = $DB->q("TABLE SELECT %Al FROM $table WHERE `$column` = %s", $keys, $value);

    foreach ($RELATIONS as $next_table => $table_rels) {
        foreach ($table_rels as $next_column => $constraint) {
            @list($foreign, $action) = explode('&', $constraint);
            list($foreign_table, $foreign_key) = explode('.', $foreign);
            if (empty($action)) {
                $action = 'CASCADE';
            }
            if (in_array($action, array('SETNULL','NOCONSTRAINT'))) {
                continue;
            }
            if ($foreign_table == $table) {
                foreach ($rows as $row) {
                    fk_dependent_rows(
                        $results,
                        $next_table,
                        $next_column,
                                      $row[$foreign_key],
                        $depth+1
                    );
                }
            }
        }
    }

    foreach ($rows as $row) {
        $res = array($table, $row);
        if (!in_array($results, $res)) {
            $results[] = $res;
        }
    }
}
