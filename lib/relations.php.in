<?php
/**
 * @configure_input@
 *
 * Document relations between DOMjudge tables for various use.
 * The data is extracted from the SQL DB structure file.
 */

/** For each table specify the set of attributes that together
 *  are considered the primary key / superkey. */
$KEYS = array(
// @KEYS@
);

/** For each table, list all attributes that reference foreign keys
 *  and specify the source of that key. Appended to the
 *  foreign key is '&<ACTION>' where ACTION can be any of the
 *  following referential actions on delete of the foreign row:
 *  CASCADE:  also delete the source row
 *  SETNULL:  set source key to NULL
 *  RESTRICT: disallow delete of foreign row
 *  NOCONSTRAINT: no constraint is specified, even though the field
 *                references a foreign key.
 */
$RELATIONS = array(
// @RELATIONS@
);

// Additional relations not encoded in the SQL structure:
$RELATIONS['clarification']['sender']    = 'team.teamid&NOCONSTRAINT';
$RELATIONS['clarification']['recipient'] = 'team.teamid&NOCONSTRAINT';

/**
 * Check whether some primary key is referenced in any
 * table as a foreign key.
 *
 * Returns null or an array "table name => action" where matches are found.
 */
function fk_check($keyfield, $value) {
	global $RELATIONS, $DB;

	$ret = array();
	foreach ( $RELATIONS as $table => $keys ) {
		foreach ( $keys as $key => $val ) {
			@list( $foreign, $action ) = explode('&', $val);
			if ( empty($action) ) $action = 'CASCADE';
			if ( $foreign == $keyfield ) {
				$c = $DB->q("VALUE SELECT count(*) FROM $table WHERE $key = %s", $value);
				if ( $c > 0 ) $ret[$table] = $action;
			}
		}
	}

	if ( count($ret) ) return $ret;
	return null;
}

/**
 * Find all dependent tables that a delete could cascade into.
 *
 * Returns an array of table names.
 */
function fk_dependent_tables($table)
{
	global $RELATIONS;

	$ret = array();
	// We do a BFS through the list of tables.
	$queue = array($table);
	while ( count($queue)>0 ) {
		$curr_table = reset($queue);
		unset($queue[array_search($curr_table,$queue)]);

		if ( in_array($curr_table,$ret) ) continue;
		if ( $curr_table!=$table ) $ret[] = $curr_table;

		foreach ( $RELATIONS as $next_table => $data ) {
			foreach ( $data as $val ) {
				@list( $foreign, $action ) = explode('&', $val);
				@list( $foreign_table, $foreign_key ) = explode('.', $foreign);
				if ( empty($action) ) $action = 'CASCADE';
				if ( $foreign_table==$curr_table && $action=='CASCADE' ) {
					$queue[] = $next_table;
				}
			}
		}
	}

	return $ret;
}
