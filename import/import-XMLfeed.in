#!/usr/bin/env php
<?php declare(strict_types=1);
/**
 * @configure_input@
 *
 * Parses a CCS event feed and imports submissions from another
 * contest system by downloading them through a minimal submission
 * source JSON REST API.
 *
 * Part of the DOMjudge Programming Contest Jury System and licenced
 * under the GNU GPL. See README and COPYING for details.
 */
if (isset($_SERVER['REMOTE_ADDR'])) {
    die("Commandline use only");
}

require('@domserver_etcdir@/domserver-static.php');
require(ETCDIR . '/domserver-config.php');

define('SCRIPT_ID', 'import-XMLfeed');
define('LOGFILE', LOGDIR.'/import.log');

// We define IS_JURY and include lib/www/auth.php to make
// checkrole('jury') return true in submit_solution() in
// lib/lib.misc.php.
define('IS_JURY', true);

require(LIBDIR . '/init.php');
require_once(LIBWWWDIR . '/auth.php');
require_once(LIBWWWDIR . '/checkers.jury.php');

require_once(LIBVENDORDIR . '/autoload.php');

setup_database_connection();

$verbose = LOG_INFO;
$waittime = 5;

$cdatas = getCurContests(true);
$cids = array_keys($cdatas);
if (count($cdatas)!=1) {
    error("Feed only supports exactly one active contest.");
}
// get first=only elt from arrays
$cdata = reset($cdatas);
$cid = reset($cids);

$config = spyc_load_file(ETCDIR . '/import-forwardfeed.yaml');

$resturl = $config['url'];
$restuser = @$config['user'];
$restpass = @$config['pass'];

$feedurl = $config['feedurl'];

function request($url, $verb = 'GET', $data = '')
{
    global $resturl, $restuser, $restpass;

    $url = $resturl . "/" . $url;
    if ($verb == 'GET' && !empty($data)) {
        $url .= '?' . $data;
    }

    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_USERAGENT, "DOMjudge/" . DOMJUDGE_VERSION);
    curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
    curl_setopt($ch, CURLOPT_USERPWD, $restuser . ":" . $restpass);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    if ($verb == 'POST') {
        curl_setopt($ch, CURLOPT_POST, true);
        if (is_array($data)) {
            curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: multipart/form-data'));
        }
    } elseif ($verb == 'PUT' || $verb == 'DELETE') {
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $verb);
    }
    if ($verb == 'POST' || $verb == 'PUT') {
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
    }

    $response = curl_exec($ch);
    if (!$response) {
        error("Error while executing curl with url " . $url . ": " . curl_error($ch));
    }
    $status = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    if ($status < 200 || $status >= 300) {
        error("Error while executing curl with url " . $url .
              ": http status code: " . $status . ", response: " . $response);
    }

    curl_close($ch);
    return $response;
}


logmsg(LOG_NOTICE, "XML feed import started [DOMjudge/".DOMJUDGE_VERSION."]");

initsignals();

function remap($type, $id)
{
    global $config;
    if (empty($config['remapping'][$type][$id])) {
        return $id;
    }

    return $config['remapping'][$type][$id];
}

function val($node, $tag)
{
    return $node->getElementsByTagName($tag)->item(0)->nodeValue;
}

function update_contest_times($data)
{
    global $DB, $cdata, $cid;

    // Preserve relative times:
    foreach (array('activatetime', 'freezetime', 'unfreezetime') as $time) {
        $timestr = $time.'_string';
        if (!empty($cdata[$timestr]) && strpos('+-', $cdata[$timestr][0])!==false) {
            $data[$timestr] = $cdata[$timestr];
        } else {
            $data[$timestr] = null;
        }
    }

    // Code below copied from www/jury/edit.php
    $CHECKER_ERRORS = array();
    $itemdata = check_contest($data, array('cid' => $cid));
    if (count($CHECKER_ERRORS)) {
        error("Errors while processing contest $cid:\n" .
              implode(";\n", $CHECKER_ERRORS));
    }

    $DB->q("UPDATE contest SET %S WHERE cid = %i", $itemdata, $cid);
    auditlog('contest', $cid, 'updated');
}

function check_contest_times($update = false)
{
    global $DB, $cdata, $cid, $xpath;

    $infos = $xpath->query('/contest/info');
    $contest = $infos->item($infos->length-1);

    sscanf(val($contest, 'length'), "%d:%d:%d", $h, $m, $s);
    $length = 3600*$h + 60*$m + $s;

    // Special-case contest starttime "undefined":
    if (val($contest, 'starttime')=='undefined') {
        logmsg(LOG_NOTICE, 'Read contest starttime "undefined", disabling contest.');

        $data = array('starttime_string' => '2999-01-01 00:00',
                      'endtime_string' => sprintf('+%02d:%02d', $h, $m),
                      'activatetime_string' => '-1:00',
                      'enabled' => 0);

        update_contest_times($data);
        logmsg(LOG_INFO, "Contest c$cid disabled.");
        return;
    }

    if (difftime(val($contest, 'starttime'), $cdata['starttime'])!=0 ||
        $length!=difftime($cdata['endtime'], $cdata['starttime'])) {
        warning("Contest times do not match with external CCS data.");

        if ($update) {
            $data = array('starttime_string' => strftime('%Y-%m-%d %H:%M:%S', (int)val($contest, 'starttime')),
                          'endtime_string' => sprintf('+%02d:%02d', $h, $m),
                          'activatetime_string' => '-1:00',
                          'enabled' => 1);

            update_contest_times($data);
            logmsg(LOG_INFO, "Contest c$cid start/end times updated.");
        }
    }
}

// First check if we have the right contest, teams, problems, and
// languages loaded.
`mv $feedurl $feedurl.mine.xml`;
logmsg(LOG_DEBUG, "moved '$feedurl' to '$feedurl.mine.xml'");
$feedXML = file_get_contents($feedurl . ".mine.xml");
// Make sure the document is valid XML with a closing contest tag.
//if ( strpos($feedXML, '</contest>')!==FALSE ) $feedXML .= "\n\n</contest>\n";
$feedDOM = new DOMDocument();
$feedDOM->loadXML($feedXML);
if ($feedDOM == null) {
    error("Could not read XML feed from '$feedurl.mine.xml'.");
}
$xpath = new DOMXpath($feedDOM);

check_contest_times();

`mv $feedurl.mine.xml $feedurl`;
logmsg(LOG_DEBUG, "moved *to* '$feedurl' from '$feedurl.mine.xml'");

$problems = $xpath->query('/contest/problem');
foreach ($problems as $prob) {
    $id = $DB->q('MAYBEVALUE SELECT probid FROM contestproblem
                  WHERE probid = %s AND cid = %i AND allow_submit = 1',
                 remap('problem', val($prob, 'id')), $cid);

    if (empty($id)) {
        error("Problem ID '".val($prob, 'id')."' from external CCS not available locally.");
    }
}

$languages = $xpath->query('/contest/language');
foreach ($languages as $lang) {
    $id = $DB->q('MAYBEVALUE SELECT langid FROM language
                  WHERE langid = %s AND allow_submit = 1',
                 remap('language', val($lang, 'id')));

    if (empty($id)) {
        error("Language ID '".val($lang, 'id')."' from external CCS not available locally.");
    }

    // The language name, not ID, is in the XML 'run' element, so add
    // a mapping from the name also to our ID.
    $config['remapping']['language'][val($lang, 'name')] = $id;
}

$teams = $xpath->query('/contest/team');
foreach ($teams as $team) {
    $id = $DB->q('MAYBEVALUE SELECT teamid FROM team
                  WHERE teamid = %s AND enabled = 1',
                 remap('team', val($team, 'id')));

    if (empty($id)) {
        error("Team ID '".val($team, 'id')."' from external CCS not available locally.");
    }
}

// Constantly check XML feed for new submissions and judgings
while (true) {

    // Check whether we have received an exit signal
    if (function_exists('pcntl_signal_dispatch')) {
        pcntl_signal_dispatch();
    }
    if ($exitsignalled) {
        logmsg(LOG_NOTICE, "Received signal, exiting.");
        exit;
    }

    if (!is_readable("testfeed.xml")) {
        file_put_contents('php://stderr', ".");
        sleep($waittime);
        continue;
    }
    `mv $feedurl $feedurl.mine.xml`;
    logmsg(LOG_DEBUG, "moved '$feedurl' to '$feedurl.mine.xml'");

    $feedXML = file_get_contents($feedurl . '.mine.xml');
    $feedDOM->loadXML($feedXML);
    if ($feedDOM == null) {
        error("Could not parse '$feedurl.mine.xml'");
    }
    $xpath = new DOMXpath($feedDOM);

    // Check and update any changes in contest starttime
    check_contest_times(true);

    $runs = $xpath->query('/contest/run');

    foreach ($runs as $run) {
        $id = val($run, 'id');
        logmsg(LOG_DEBUG, "Found submission (id = $id)");

        $res = $DB->q('MAYBETUPLE SELECT submitid, teamid, probid, langid, submittime
                       FROM submission WHERE cid = %i AND externalid = %i', $cid, $id);

        if (!empty($res)) {
            if ($res['teamid']!=remap('team', val($run, 'team')) ||
                $res['probid']!=remap('problem', val($run, 'problem')) ||
                $res['langid']!=remap('language', val($run, 'language')) ||
                (abs((float)$res['submittime']-(float)val($run, 'timestamp'))>0.1 &&
                 strcasecmp(val($run, 'judged'), 'true')!=0)) {
                error("External submission '".val($run, 'id')."' already exists as s".
                      $res['submitid']." with non-matching data: " .
                      $res['teamid']." ?= ".remap('team', val($run, 'team'))    .", ".
                      $res['probid']." ?= ".remap('problem', val($run, 'problem')) .", ".
                      $res['langid']." ?= ".remap('language', val($run, 'language')).
                      (strcasecmp(val($run, 'judged'), 'true')==0 ? '' : ', submittime diff = '.
                       abs((float)$res['submittime']-(float)val($run, 'timestamp')) ." sec"));
            }
            if (val($run, 'judged') !== 'True') {
                logmsg(LOG_DEBUG, "Skipping re-import of submission '".
                        $id."' (s".$res['submitid'].")");
                continue;
            }
        } else {
            // We're inserting a new submission
            $res = dj_json_decode(request('submissionFiles/'.val($run, 'id'), 'GET'));

            $files = array();
            $filenames = array();

            foreach ($res as $f) {
                $filenames[] = $f['filename'];
                if (!($tmpfname = tempnam(TMPDIR, "import_XMLfeed"))) {
                    error("Could not create temporary file.");
                }
                file_put_contents($tmpfname, base64_decode($f['content']));
                $files[] = $tmpfname;
            }
            // FIXME: put 'mainclass' file at front of list?

            $id = submit_solution(
                remap('team', val($run, 'team')),
                remap('problem', val($run, 'problem')),
                $cid,
                remap('language', val($run, 'language')),
                $files,
                $filenames,
                null,
                $id,
                val($run, 'timestamp')
            );

            logmsg(LOG_INFO, "Imported submission '".val($run, 'id')."' as s$id");

            foreach ($files as $file) {
                unlink($file);
            }
        }

        if (val($run, 'judged')==='True') {
            // We're inserting a new judging

            $DB->q('UPDATE submission SET externalresult = %s
                    WHERE cid = %i AND externalid = %i',
                   remap('result', val($run, 'result')), $cid, $id);

            logmsg(LOG_INFO, "Updated external result for s".$id.
                   " to '".remap('result', val($run, 'result'))."'");
        }

        logmsg(LOG_DEBUG, "Submission handled.");
    }

    sleep($waittime);
}
