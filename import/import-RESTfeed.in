#!/usr/bin/env php
<?php declare(strict_types=1);
/**
 * @configure_input@
 *
 * Import contest data from another contest system through a
 * "run-forwarding feed" provided by a JSON REST API.
 *
 * Part of the DOMjudge Programming Contest Jury System and licenced
 * under the GNU GPL. See README and COPYING for details.
 */
if (isset($_SERVER['REMOTE_ADDR'])) {
    die("Commandline use only");
}

require('@domserver_etcdir@/domserver-static.php');
require(ETCDIR . '/domserver-config.php');

define('SCRIPT_ID', 'import-RESTfeed');
define('LOGFILE', LOGDIR.'/import.log');

// We define IS_JURY and include lib/www/auth.php to make
// checkrole('jury') return true in submit_solution() in
// lib/lib.misc.php.
define('IS_JURY', true);

require(LIBDIR . '/init.php');
require_once(LIBWWWDIR . '/auth.php');

require_once(LIBVENDORDIR . '/autoload.php');

setup_database_connection();

$verbose = LOG_NOTICE;
$loglevel = LOG_INFO;
$waittime = 5;

$cdatas = getCurContests(true);
$cids = array_keys($cdatas);

$config = spyc_load_file(ETCDIR . '/import-forwardfeed.yaml');

$resturl = $config['url'];
$restuser = @$config['user'];
$restpass = @$config['pass'];

function request($url, $verb = 'GET', $data = '')
{
    global $resturl, $restuser, $restpass;

    $url = $resturl . "/" . $url;
    if ($verb == 'GET') {
        $url .= '?' . $data;
    }

    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_USERAGENT, "DOMjudge/" . DOMJUDGE_VERSION);
    curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
    curl_setopt($ch, CURLOPT_USERPWD, $restuser . ":" . $restpass);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    if ($verb == 'POST') {
        curl_setopt($ch, CURLOPT_POST, true);
        if (is_array($data)) {
            curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: multipart/form-data'));
        }
    } elseif ($verb == 'PUT' || $verb == 'DELETE') {
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $verb);
    }
    if ($verb == 'POST' || $verb == 'PUT') {
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
    }

    $response = curl_exec($ch);
    if (!$response) {
        error("Error while executing curl with url " . $url . ": " . curl_error($ch));
    }
    $status = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    if ($status < 200 || $status >= 300) {
        error("Error while executing curl with url " . $url .
              ": http status code: " . $status . ", response: " . $response);
    }

    curl_close($ch);
    return $response;
}


logmsg(LOG_NOTICE, "Forwarding-feed import started [DOMjudge/".DOMJUDGE_VERSION."]");

initsignals();

// First check if we have the right contest, teams, problems, and
// languages loaded.

function remap($type, $id)
{
    global $config;
    if (empty($config['remapping'][$type][$id])) {
        return $id;
    }

    return $config['remapping'][$type][$id];
}

function getTeamID($externalid)
{
    global $DB;
    return $DB->q('MAYBEVALUE SELECT teamid FROM team
                   WHERE teamid = %s AND enabled = 1', $externalid);
}

$contest = dj_json_decode(request('contest'));
$cid = remap('contest', $contest['id']);
if (!isset($cdatas[$cid])) {
    error("Contest id $cid not known or active.");
}
$cdata = $cdatas[$cid];

if (difftime($contest['start'], $cdata['starttime'])!=0 ||
    $contest['length']!=difftime($cdata['endtime'], $cdata['starttime'])) {
    $readableStart = date("Y-m-d H:i:s", $contest['start']);
    warning("Contest times do not match with external CCS data.
  Start:
  - ours:   $cdata[starttime]
  - theirs: $contest[start]
            $readableStart
  Length:
  - ours:   " . difftime($cdata['endtime'], $cdata['starttime']) . "
  - theirs: $contest[length]");
}

$problems = dj_json_decode(request('problems'));
foreach ($problems as $prob) {
    $id = $DB->q('MAYBEVALUE SELECT probid FROM problem INNER JOIN contestproblem USING(probid)
                  WHERE probid = %s AND cid = %i AND allow_submit = 1',
                 remap('problem', $prob['id']), $cid);

    if (empty($id)) {
        error("Problem ID '".$prob['id']."' from external CCS not available locally.");
    }
}

$languages = dj_json_decode(request('languages'));
foreach ($languages as $lang) {
    $id = $DB->q('MAYBEVALUE SELECT langid FROM language
                  WHERE langid = %s AND allow_submit = 1',
                 remap('language', $lang['id']));

    if (empty($id)) {
        error("Language ID '".$lang['id']."' from external CCS not available locally.");
    }
}

$teams = dj_json_decode(request('teams'));
foreach ($teams as $team) {
    $id = getTeamID(remap('team', $team['id']));

    //$DB->q('UPDATE team SET name = %s WHERE login = %s',
    //       $team['name'],remap('team',$team['id']));

    if (empty($id)) {
        error("Team ID '".$team['id']."' from external CCS not available locally.");
    }
}

// Last obtained submission and judging IDs from external CCS
$lastsubmitid = -1;
$lastjudgingid = -1;

// Constantly check API for new submissions and judgings
while (true) {

    // Check whether we have received an exit signal
    if (function_exists('pcntl_signal_dispatch')) {
        pcntl_signal_dispatch();
    }
    if ($exitsignalled) {
        logmsg(LOG_NOTICE, "Received signal, exiting.");
        exit;
    }

    // Check new submissions
    $submissions = dj_json_decode(request('submissions', 'GET', "fromid=".($lastsubmitid+1)));

    foreach ($submissions as $subm) {
        $lastsubmitid = max($lastsubmitid, $subm['id']);

        $res = $DB->q('MAYBETUPLE SELECT submitid, teamid, probid, langid, submittime
                       FROM submission WHERE cid = %i AND externalid = %i',
                      $cid, $subm['id']);

        if (!empty($res)) {
            if ($res['teamid']!=getTeamID(remap('team', $subm['team'])) ||
                $res['probid']!=remap('problem', $subm['problem']) ||
                $res['langid']!=remap('language', $subm['language']) ||
                $res['submittime']!=$subm['time']) {
                error("External submission '".$subm['id']."' already exists as s".
                      $res['submitid']." with non-matching data.");
            }
            logmsg(LOG_DEBUG, "Skipping re-import of submission '".
                   $subm['id']."' (s".$res['submitid'].")");
            continue;
        }

        $res = dj_json_decode(request('submission_files', 'GET', 'id='.$subm['id']));

        $files = array();
        $filenames = array();

        foreach ($res as $f) {
            $filenames[] = $f['filename'];
            if (!($tmpfname = tempnam(TMPDIR, "import_RESTfeed"))) {
                error("Could not create temporary file.");
            }
            file_put_contents($tmpfname, base64_decode($f['content']));
            $files[] = $tmpfname;
        }
        // FIXME: put 'mainclass' file at front of list?

        $teamid = getTeamID(remap('team', $subm['team']));

        if (empty($teamid)) {
            error("Got submission for non-existent local team with Team ID '".
                  $subm['team']."' and external ID '".remap('team', $subm['team'])."'");
        }

        if ($subm['time'] < $cdata['starttime'] || $subm['time'] < $contest['start']) {
            logmsg(LOG_DEBUG, "Skipping import of submission '".
                   $subm['id']."' which was submitted too early");
            continue;
        }

        $id = submit_solution(
            $teamid,
                              remap('problem', $subm['problem']),
                              $cid,
                              remap('language', $subm['language']),
                              $files,
            $filenames,
            null,
                              $subm['id'],
            $subm['time']
        );

        logmsg(LOG_INFO, "Imported submission '".$subm['id']."' as s$id");

        foreach ($files as $file) {
            unlink($file);
        }
    }

    // Check new judgings
    $lastjudgingid++;
    $judgings = dj_json_decode(request('judgings', 'GET', "fromid=$lastjudgingid"));

    foreach ($judgings as $jud) {
        $lastjudgingid = max($lastjudgingid, $jud['id']);

        $DB->q('UPDATE submission SET externalresult = %s
                WHERE cid = %i AND externalid = %i',
               remap('result', $jud['outcome']), $cid, $jud['submission']);

        logmsg(LOG_INFO, "Updated external result for s".$jud['submission'].
               " to '".remap('result', $jud['outcome'])."'");
    }

    sleep($waittime);
}
