#!/usr/bin/env php
<?php
/**
 * @configure_input@
 *
 * Program to do a "relive" simulation of a previous contest: all
 * original results are added to the scoreboard in real contest time.
 *
 * Part of the DOMjudge Programming Contest Jury System and licenced
 * under the GNU GPL. See README and COPYING for details.
 */
if ( isset($_SERVER['REMOTE_ADDR']) ) die ("Commandline use only");

$waittime = 30;

$csvsep = "\t";

$def_teamprefix = 'Simulated: ';
$def_categ = 1;
$def_lang = 'c';

require('@domserver_etcdir@/domserver-static.php');
require(ETCDIR . '/domserver-config.php');

define('SCRIPT_ID', 'simulate_contest');
define('LOGFILE', LOGDIR.'/auxiliary.log');

require(LIBDIR . '/init.php');

function usage()
{
	global $def_categ;
	echo "Usage: " . SCRIPT_ID . " [OPTION]... <resultfile>\n\n" .
	    "Replay a previous contest in the active one. Recorded submissions are read\n" .
	    "from <resultfile>. Each line in this file must describe a submission with tab\n" .
	    "separated entries: team, problem shortname, time (in contest minutes), result.\n" .
	    "Alternatively, with the -s option, a DOMjudge scoreboard can be used as input.\n" .
	    "The header must contain at least the team and problem columns and these must\n" .
	    "match with the following rows. A final summary line is ignored.\n\n" .
	    "  -C       contest ID to play simulation in (defaults to unique active contest).\n" .
	    "  -c       team category ID for simulated teams (default: $def_categ)\n" .
	    "  -f       automatically verify simulated submissions (useful when the\n" .
	    "             configuration option VERIFICATION_REQUIRED is enabled\n" .
	    "  -r       remove simulation generated data and exit\n" .
	    "  -s       parse resultfile as a tab-separated DOMjudge scoreboard\n" .
	    "  -v       set verbosity to LEVEL (syslog levels)\n" .
	    "  -h       display this help and exit\n" .
	    "  -V       output version information and exit\n\n";
	exit;
}

$options = getopt("C:c:frsv:hV");
// FIXME: getopt doesn't return FALSE on parse failure as documented!
if ( $options===FALSE ) {
	echo "Error: parsing options failed.\n";
	usage();
}

if ( isset($options['C']) ) $options['cid']     = $options['C'];
if ( isset($options['c']) ) $options['teamcat'] = $options['c'];
if ( isset($options['f']) ) $options['verify']  = $options['f'];
if ( isset($options['r']) ) $options['remove']  = $options['r'];
if ( isset($options['s']) ) $options['scoreb']  = $options['s'];
if ( isset($options['v']) ) $options['verbose'] = $options['v'];

if ( isset($options['V']) ) version();
if ( isset($options['h']) ) usage();

setup_database_connection();

$cids = getCurrentContests();
$cid = NULL;
if ( count($cids)==1 ) $cid = reset($cids);
if ( isset($options['cid']) ) $cid = $options['cid'];
if ( $cid===NULL ) {
	error("No contest ID specified and no unique active contest found.");
}

$categ = $def_categ;
if ( isset($options['teamcat']) ) {
	if ( !preg_match('/^[0-9]+$/', $options['teamcat']) ) {
		error("category ID must be an integer: '".$options['teamcat']."'");
	}
	$categ = (int)$options['teamcat'];
}

$verify = FALSE;
if ( isset($options['verify']) ) $verify = TRUE;

$verbose = LOG_INFO;
if ( isset($options['verbose']) ) $verbose = $options['verbose'];

if ( isset($options['remove']) ) {
	logmsg(LOG_NOTICE, "removing simulation generated data from the database...");

	$res = $DB->q("RETURNAFFECTED DELETE FROM team WHERE name LIKE '$def_teamprefix%%'");

	logmsg(LOG_NOTICE, "deleted $res teams, exiting.");

	exit;
}

// PHP getopt() sucks: it does not provide an OPTIND variable. We're
// just going to assume that the last commandline argument is the
// results file.
$pos = $_SERVER['argc']-1;
if ( $pos==0 || empty($_SERVER['argv'][$pos]) ) error("original results file missing");

$resultsfile = $_SERVER['argv'][$pos];

$submissions = array();

// Field encoding:
$fteam = 0;
$fprob = 1;
$ftime = 2;
$fresult = 3;

function add_submission($team, $prob, $time, $result)
{
	global $submissions, $fteam, $fprob, $ftime, $fresult;

	$subm = array();
	$subm[$fteam]   = $team;
	$subm[$fprob]   = $prob;
	$subm[$ftime]   = $time;
	$subm[$fresult] = $result;
	$submissions[] = $subm;
	logmsg(LOG_DEBUG, "added submission $team/$prob/$time/$result");
}

function parse_scoreboard($fd)
{
	global $DB, $cid, $csvsep;

	$contest_len = (int)$DB->q('VALUE SELECT (endtime - starttime)/60
	                            FROM contest WHERE cid = %i', $cid);

	if ( ($line = fgets($fd))===FALSE ) error("could not read header line.");

	$header = str_getcsv($line, $csvsep);
	if ( !is_array($header) || count($header)<4 ) {
		error("could not detect scoreboard header.");
	}
	$nheader = count($header);
	$nfields = NULL;
	$teamfield = NULL;
	$probs = array();
	for ($i=0; $i<$nheader; $i++) {
		$header[$i] = trim($header[$i]);
		if ( preg_match('/^team$/i', $header[$i]) ) {
			$teamfield = $i;
			continue;
		}
		if ( preg_match('/^score$/i', $header[$i]) ) {
			$nprobs = $nheader - $i - 1;
			continue;
		}
		if ( isset($nprobs) ) {
			$prob = trim($header[$i]);
			// Strip extra colour info in the problem header cells:
			$prob = preg_replace(array('/ +problem colour .*/','/ +●/'), '', $prob);
			$probs[] = $prob;
		}
	}
	logmsg(LOG_DEBUG, "parsed header: #header = $nheader, ".
	       "teamname field = $teamfield, #problems = $nprobs");
	if ( !isset($teamfield) || !isset($nprobs) ) {
		error("could not parse scoreboard header.");
	}

	$rows = array();
	while ( ($line = fgets($fd))!==FALSE ) {
		// Ignore a last summary line:
		if ( feof($fd) || preg_match('/summary/i', $line) ) break;

		$row = str_getcsv($line, $csvsep);
		foreach ( $row as $i => $data ) $row[$i] = trim($data);
		if ( isset($nfields) ) {
			if ( count($row)!=$nfields ) error("varying number of fields per row.");
		} else {
			$nfields = count($row);
			if ( $nfields!=$nheader ) {
				error("# fields ($nfields) does not match # headers ($nheader).");
			}
		}
		$rows[] = $row;
	}

	foreach ( $rows as $r => $row ) {
		$team = $row[$teamfield];

		for($i=0; $i<$nprobs; $i++) {
			$data = $row[$nfields-$nprobs+$i];
			$prob = $probs[$i];
			$nsub = preg_replace('/^([0-9]+).*/', '\1', $data);
			$time = NULL;
			if ( preg_match('/^[0-9]+\/[0-9]+$/', $data) ) {
				$solved = TRUE;
				$time = preg_replace('/^.*\//', '', $data);
			} elseif ( preg_match('/^[0-9]+ +\([0-9]+ \+ [0-9]+\)$/', $data) ) {
				$solved = TRUE;
				$time = preg_replace('/^[0-9]+ +\(([0-9]+) \+ .*$/', '\1', $data);
			} elseif ( preg_match('/^[0-9]+$/', $data) ) {
				$solved = FALSE;
			} else {
				error("unknown format in row $r, problem '$prob': '$data'");
			}

			if ( $solved ) {
				// Add wrong-answer submissions (one minute before correct
				// submission) to get right amount of penalty time:
				for ($j=0; $j<$nsub-1; $j++) {
					add_submission($team, $prob, $time - 1, 'wrong-answer');
				}
				add_submission($team, $prob, $time, 'correct');
			} else {
				// If unsolved, insert submissions at last minute of
				// contest so that the final scoreboard contains the
				// correct data:
				for ($j=0; $j<$nsub-1; $j++) {
					add_submission($team, $prob, $contest_len - 1, 'wrong-answer');
				}
			}
		}
	}
}

logmsg(LOG_NOTICE, "started, file = '$resultsfile'");

$cdatas = getCurContests(TRUE);
if ( !isset($cdatas[$cid]) ) {
	error("Contest c${cid} does not exist");
}
$cdata = $cdatas[$cid];

if ( ($fd = @fopen($resultsfile, 'r'))===FALSE ) {
	error("results file '$resultsfile' not found or readable");
}

if ( isset($options['scoreb']) ) {
	logmsg(LOG_INFO, "parsing scoreboard file");
	parse_scoreboard($fd);
} else {
	logmsg(LOG_INFO, "parsing submission results file");
	while ( ($subm = fgetcsv($fd, 0, $csvsep)) ) $submissions[] = $subm;
}

fclose($fd);

// Check team category and create if necessary:
if ( !$DB->q('MAYBEVALUE SELECT categoryid FROM team_category
              WHERE categoryid = %i', $categ) ) {
	$DB->q('INSERT INTO team_category
	        (categoryid, name) VALUES (%i, %s)', $categ, 'Simulated teams');
	logmsg(LOG_INFO, "team category $categ, 'Simulated teams' created");
}

// Create team IDs:
$teamids = array();
foreach ( $submissions as &$subm ) {
	if ( !isset($teamids[$subm[$fteam]]) ) {
		// Create fake teams
		$teamname = $def_teamprefix.$subm[$fteam];

		$teamid = $DB->q('MAYBEVALUE SELECT teamid FROM team
		                  WHERE name = %s', $teamname);

		if ( !isset($teamid) ) {
			$teamid = $DB->q('RETURNID INSERT INTO team
			                  (name, categoryid, comments)
			                  VALUES (%s, %i, "fake simulation team")',
			                 $teamname, $categ);
		}
		$teamids[$subm[$fteam]] = $teamid;
	}
	$subm['teamid'] = $teamids[$subm[$fteam]];
}

logmsg(LOG_INFO, "teams created");

$probids = $DB->q('KEYVALUETABLE SELECT shortname, probid FROM problem
                   WHERE cid = %i', $cid);

while ( $cdata['cid']==$cid && difftime(now(),$cdata['endtime'])<0 ) { // bug!

	// Check for submissions that require inserting at current time
	foreach ( $submissions as &$subm ) {

		$stime = $cdata['starttime'] + $subm[$ftime]*60;
		$probid = @$probids[$subm[$fprob]];
		if ( !isset($probid) ) {
			error("problem '$subm[$fprob]' not found in active contest.");
		}

		if ( !isset($subm['inserted']) && difftime($stime,now())<=0 ) {

			logmsg(LOG_DEBUG, "inserting $subm[$fteam]/$subm[$fprob]/$subm[$ftime]" .
			       " @ $stime, res: $subm[$fresult]");

			// Insert submission together with fake judgement to make
			// sure that no judgehost tries to pick it up.
			$DB->q('START TRANSACTION');

			$submitid = $DB->q('RETURNID INSERT INTO submission
			                    (cid, teamid, probid, langid, submittime)
			                    VALUES (%i, %i, %i, %s, %s)',
			                   $cid, $subm['teamid'], $probid, $def_lang, $stime);

			$judgingid = $DB->q('RETURNID INSERT INTO judging
			                     (cid, submitid, starttime, endtime, result, verified)
			                     VALUES (%i, %i, %s, %s, %s, %i)',
			                    $cid, $submitid, $stime, $stime, $subm[$fresult], (int)$verify);

			calcScoreRow($cid, $subm['teamid'], $probid);

			$DB->q('COMMIT');

			eventlog('submission', $submitid, 'create', $cid);
			eventlog('judging', $judgingid, 'create', $cid);

			logmsg(LOG_INFO, "inserted submission $subm[$fteam]/$subm[$fprob]");
			$subm['inserted'] = TRUE;
		}
	}

	sleep($waittime);
	$cdatas = getCurContests(TRUE);
	if ( !isset($cdatas[$cid]) ) {
		error("Contest c${cid} does not exist");
	}
	$cdata = $cdatas[$cid];
}

logmsg(LOG_NOTICE, "contest finished, exiting.");

exit;
