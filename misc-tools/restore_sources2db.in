#!/usr/bin/env php
<?php
/**
 * @configure_input@
 *
 * Program to rebuild the DB submissions table from submitted sources
 * on the filesystem. Can be useful in case of a database crash.
 *
 * Does not do any checking on valid parameters (team, problem, etc.)
 * and inserts all validly-named source files for all contests. Using
 * InnoDB tables will provide foreign key checks.
 *
 * The file modification times are used as submittime, as Unix does
 * not have file creation timestamps. Therefore it is advisable not to
 * touch the sources in SUBMITDIR. This script tries to insert the
 * sources with the original submission ID's, so to restore the
 * original state, the submissions table should be empty before
 * running this script.
 *
 * Part of the DOMjudge Programming Contest Jury System and licenced
 * under the GNU GPL. See README and COPYING for details.
 */
if ( isset($_SERVER['REMOTE_ADDR']) ) die ("Commandline use only");

require('@domserver_etcdir@/domserver-static.php');
require(ETCDIR . '/domserver-config.php');

define('SCRIPT_ID', 'restore_sources2db');
define('LOGFILE', LOGDIR.'/auxiliary.log');

require(LIBDIR . '/init.php');

setup_database_connection();

$sourcesdir = SUBMITDIR;
if ( ! empty($_SERVER['argv'][1]) ) $sourcesdir = $_SERVER['argv'][1];

if ( !(is_dir($sourcesdir) && is_readable($sourcesdir)) ) {
	error("'$sourcesdir' is no directory or not readable");
}

logmsg(LOG_NOTICE, "started, sources dir = '$sourcesdir'");

if ( !($dh = @opendir($sourcesdir)) ) {
	error("cannot read directory '$sourcesdir'");
}

$submissions = array();

$probname2id = $DB->q("KEYVALUETABLE SELECT CONCAT(cid, '-', shortname), probid
                       FROM contestproblem");

// Check if team.login column is present and use it for a keyvalue map:
$res = $DB->q("MAYBETUPLE SELECT * FROM information_schema.COLUMNS
               WHERE TABLE_SCHEMA = 'domjudge-test' AND
               TABLE_NAME = 'team' AND COLUMN_NAME = 'login'");
if ( !empty($res) ) {
	$teamlogin2id = $DB->q('KEYVALUETABLE SELECT login, teamid FROM team');
}

while ( ($src = readdir($dh))!==FALSE ) {

	$f = $sourcesdir . '/' . $src;

	if ( !(is_file($f) && is_readable($f)) ) {
		logmsg(LOG_DEBUG, "skipping '$src': not a readable file");
		continue;
	}

	// Reconstruct submission data from filename and mtime
	$fdata = explode('.', $src, 7);
	// Detect and support obsolete (version <=3.2) sourcefile format
	if ( count($fdata)==5 ) {
		logmsg(LOG_DEBUG, "detected old sourcefile format: '$src'");
		list($cid, $sid, $teamid, $probid, $langid) = $fdata;
		if ( $cid[0]=='c' ) $cid = substr($cid,1);
		if ( $sid[0]=='s' ) $sid = substr($sid,1);
		$rank = 0;
		$filename = 'source.'.$langid;
	} else if ( count($fdata)==7 ) {
		list($cid, $sid, $teamid, $probid, $langid, $rank, $filename) = $fdata;
		if ( $cid[0]=='c' ) $cid = substr($cid,1);
		if ( $sid[0]=='s' ) $sid = substr($sid,1);
		if ( $teamid[0]=='t' ) $teamid = substr($teamid,1);
		if ( $probid[0]=='p' ) $probid = substr($probid,1);
	} else {
		logmsg(LOG_DEBUG, "skipping '$src': does not match pattern");
		continue;
	}

	$submittime = filemtime($f);

	// Convert old-style probid to new numeric one:
	if ( !ctype_digit($probid) && !empty($probname2id[$cid.'-'.$probid]) ) {
		$probid = $probname2id[$cid.'-'.$probid];
	}

	// Convert old-style team login to new numeric teamid:
	if ( !ctype_digit($teamid) && !empty($teamlogin2id[$teamid]) ) {
		$teamid = $teamlogin2id[$teamid];
	}

	// Store submission in array
	if ( !isset($submissions[$sid]) ) {
		$submissions[$sid] = array('cid' => $cid,
		                           'sid' => $sid,
		                           'teamid' => $teamid,
		                           'probid' => $probid,
		                           'langid' => $langid,
		                           'submittime' => $submittime,
		                           'files' => array() );
	}
	$submissions[$sid]['files'][$rank] = array('source' => $f, 'name' => $filename);
}

closedir($dh);

foreach ( $submissions as $s ) {

	// Insert submissions into the database
	$DB->q('START TRANSACTION');
	$DB->q('INSERT INTO submission
	        (submitid,cid,teamid,probid,langid,submittime)
	        VALUES (%i, %i, %s, %s, %s, %s)', $s['sid'], $s['cid'],
	       $s['teamid'], $s['probid'], $s['langid'], $s['submittime']);

	$mainfile = NULL;
	foreach ( $s['files'] as $rank => $file ) {
		$DB->q('INSERT INTO submission_file (submitid, filename, rank, sourcecode)
		        VALUES (%i, %s, %i, %s)', $s['sid'], $file['name'], $rank,
		       dj_file_get_contents($file['source']));
		if ( empty($mainfile) ) $mainfile = $file['name'];
	}
	$DB->q('COMMIT');

	// Log to event table
	$DB->q('INSERT INTO event (eventtime, cid, teamid, langid,
	                           probid, submitid, description)
	        VALUES(%s, %i, %s, %s, %s, %i, "problem submitted")',
	       $s['submittime'], $s['cid'], $s['teamid'], $s['langid'],
	       $s['probid'], $s['sid']);

	logmsg(LOG_INFO, "inserted $s[teamid]/$s[probid]/$s[langid], " .
	       "id s$s[sid]/c$s[cid], main file '$mainfile'");
}

logmsg(LOG_NOTICE, "finished, restored " . count($submissions) .
       " submissions to database.");

exit;
