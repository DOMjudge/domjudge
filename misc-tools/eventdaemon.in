#!/usr/bin/env php
<?php
/**
 * @configure_input@
 *
 * Generate events for a contest that cannot be generated in other
 * code. This includes:
 * - Initial "create events" at MAX(contest:activatetime,daemon start)
 *   for static data: contest, teams, problems, ...
 * - Contest state change events: start, freeze, end, finalize, ...
 *
 * Part of the DOMjudge Programming Contest Jury System and licenced
 * under the GNU GPL. See README and COPYING for details.
 */
if ( isset($_SERVER['REMOTE_ADDR']) ) die ("Commandline use only");

require('@domserver_etcdir@/domserver-static.php');

require(ETCDIR . '/domserver-config.php');

define('SCRIPT_ID', 'eventdaemon');
define('PIDFILE', RUNDIR.'/eventdaemon.pid');
define('LOGFILE', LOGDIR.'/eventdaemon.log');

$verbose = LOG_INFO;

require(LIBDIR . '/init.php');

function usage()
{
	echo
"Usage: ".SCRIPT_ID." [OPTION...]

Generate events for a contest that cannot be generated in other code.
This includes:
 * Initial \"create events\" at MAX(contest:activatetime,daemon start)
   for static data: contest, teams, problems, ...
 * Contest state change events: start, freeze, end, finalize, ...

Options:
  -d        Daemonize after startup.
  -C <cid>  Run for contest with ID or shortname <cid>. The contest
            defaults to the current active contest if it is unique.
  -v        Set verbosity to LEVEL (syslog levels).
  -h        Display this help and exit.
  -V        Output version information and exit.

";
	exit;
}

$options = getopt("dC:v:hV");
// FIXME: getopt doesn't return FALSE on parse failure as documented!
if ( $options===FALSE ) {
	echo "Error: parsing options failed.\n";
	usage();
}

if ( isset($options['d']) ) $options['daemon']  = $options['d'];
if ( isset($options['C']) ) $options['cid']     = $options['C'];
if ( isset($options['v']) ) $options['verbose'] = $options['v'];

if ( isset($options['V']) ) version();
if ( isset($options['h']) ) usage();

$verbose = LOG_INFO;
if ( isset($options['verbose']) ) {
	if ( preg_match('/^\d+$/', $options['verbose'] ) ) {
		$verbose = $options['verbose'];
	} else {
		echo "Invalid value for verbose, must be positive integer\n";
		exit(1);
	}
}

if ( DEBUG & DEBUG_JUDGE ) {
	$verbose = LOG_DEBUG;
	putenv('DEBUG=1');
}

initsignals();

// Daemonize before setting up mysql connection.
if ( isset($options['daemon']) ) daemonize(PIDFILE);

setup_database_connection();

$cids = getCurContests();
$cid = NULL;
if ( count($cids)==1 ) $cid = reset($cids);
if ( isset($options['cid']) ) {
	$cid = $options['cid'];
	if ( !preg_match('/^[0-9]+$/', $cid) ) {
		$cid = $DB->q('MAYBEVALUE SELECT cid FROM contest
		               WHERE shortname = %s', $options['cid']);
		if ( empty($cid) ) {
			error("Contest shortname '".$options['cid']."' not found.");
		}
	}
}
if ( $cid===NULL ) {
	error("No contest ID specified and no unique active contest found.");
}

logmsg(LOG_NOTICE, "Eventdaemon started for cid=$cid [DOMjudge/".DOMJUDGE_VERSION."]");

$initial_events_loaded = FALSE;

$contest_start_old = 'TBC';
$contest_start_enabled_old = 'TBC';
while ( TRUE ) {
	// Check whether we have received an exit signal
	if ( function_exists('pcntl_signal_dispatch') ) pcntl_signal_dispatch();
	if ( $exitsignalled ) {
		logmsg(LOG_NOTICE, "Received signal, exiting.");
		exit;
	}

	$contests = getCurContests(TRUE, NULL, FALSE);

	if ( !array_key_exists($cid, $contests) ) {
		error("Contest ID '$cid' not found (anymore) in active contests.");
	}
	$contest = $contests[$cid];
	$contest_start = $contest['starttime'];
	$contest_start_enabled = $contest['starttime_enabled'];
	if ( $contest_start_old !== $contest_start || $contest_start_enabled_old !== $contest_start_enabled ) {
		insert_event($cid, 'contests', dj_json_decode(API_request('/contests/' . $contest['externalid'])));
		$contest_start_old = $contest_start;
		$contest_start_enabled_old = $contest_start_enabled;
	}

	if ( !$initial_events_loaded ) initialize_events($cid);

	$fdata_old = @$fdata;
	$fdata = calcFreezeData($contest);
	if ( empty($fdata_old) ) $fdata_old = $fdata;

	// Check for contest state changes:
	if ( ($fdata_old['running']    !== $fdata['running']) ||
	     ($fdata_old['showfrozen'] !== $fdata['showfrozen']) ||
	     ($fdata_old['showfinal']  !== $fdata['showfinal']) ) {

		logmsg(LOG_INFO, "Inserting contest state update event.");
		eventlog('state', '', 'update', $cid, null, '');
	}

	// FIXME: generate contest state change events, ideally triggered
	// by an alarm.
	usleep(50000);
}

function cmp_by_id($a, $b)
{
	if ( is_int($a['id']) && is_int($b['id']) ) return $a['id'] - $b['id'];
	return strcmp($a['id'], $b['id']);
}

function insert_event($cid, $endpoint, $data)
{
	global $DB, $options;

	$old = $DB->q('MAYBETUPLE SELECT eventid, action, content FROM event
	               WHERE cid = %i AND endpointtype = %s AND endpointid = %s
	               ORDER BY eventid DESC LIMIT 1',
	              $cid, $endpoint, $data['id']);

	$json = dj_json_encode($data);

	// Check if there's already an old event and create/update
	// depending on previous state.
	if ( !isset($old) || $old['action']==='delete' ) {
		eventlog($endpoint, $data['id'], 'create', $cid, $json);
	} else {
		if ( empty($old['content']) || $old['content']!==$json ) {
			eventlog($endpoint, $data['id'], 'update', $cid, $json);
		} else {
			logmsg(LOG_DEBUG, "Skipping create $endpoint/" . $data['id'] .
			       ': already present');
		}
	}
}

function initialize_events($cid)
{
	global $API_endpoints, $initial_events_loaded, $contest;

	logmsg(LOG_NOTICE, "Initializing configuration events.");

	foreach ( $API_endpoints as $endpoint => $ep_info ) {
		if ( $ep_info['type']==='configuration' && isset($ep_info['url']) ) {
			$url = '/contests/' . $contest['externalid'] . $ep_info['url'];
			$json = API_request($url);
			if ( !isset($json) ) error("No response data for endpoint '$endpoint'.");

			$data = dj_json_decode($json);
			if ( !is_array($data) ) error("Endpoint '$endpoint' did not return a JSON list.");

			// Special case 'contests' since it is a single object:
			if ( $endpoint==='contests' ) {
				logmsg(LOG_INFO, "Inserting $endpoint create event.");
				insert_event($cid,$endpoint,$data);
				continue;
			}

			usort($data, 'cmp_by_id');

			logmsg(LOG_INFO, 'Inserting '.count($data)." $endpoint create event(s).");
			foreach ( $data as $row ) insert_event($cid,$endpoint,$row);
		}
	}

	$initial_events_loaded = TRUE;
}
