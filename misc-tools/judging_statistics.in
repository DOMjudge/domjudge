#!/usr/bin/env php
<?php
/**
 * @configure_input@
 *
 * Generates statistics for a configurable set of judgings.
 *
 * This can be used for various purposes:
 * - To determine timelimits based on the timings of jury solutions.
 * - To check that various judgehosts give the same results and
 *   timings are within close agreement.
 * - ...
 *
 * It accepts various options for selecting judgings:
 *  -c LIST    These options allow to specify comma separated lists of
 *  -h LIST      contest, judgehost, language, problem, submission, and
 *  -l LIST      team IDs, respectively. Only judgings matching the
 *  -p LIST      respective elements from specified lists, will be used
 *  -s LIST      in the statistics.
 *  -t LIST
 *
 *  -J T1_T2   Only select judgings started within the time interval
 *
 *               T1--T2. T1 and T2 should be formatted as
 *               "yyyy-mm-ddTHH:MM" where the 'T' is literal.
 *  -S T1_T2   Only select judgings of submissions done within the
 *               time interval T1--T2, with same formatting as above.
 *  -v         Only judgings that are valid, and with valid submission.
 *
 * Secondly there are options for which statistics to report:
 *  -R LIST    Report issues specified in the comma separated list.
 *             Possible report keywords:
 *               problems    min,max,avg runtimes for correct
 *                           submissions, including variability.
 *               variations  variations of results and runtime between
 *                           multiple judgings for the same submission
 *                           and of runtimes on all judgehosts.
 *               misc        miscellaneous statistics.
 *
 * Part of the DOMjudge Programming Contest Jury System and licenced
 * under the GNU GPL. See README and COPYING for details.
 */

if ( isset($_SERVER['REMOTE_ADDR']) ) die ("Commandline use only");

require('@domserver_etcdir@/domserver-static.php');
require(ETCDIR . '/domserver-config.php');

define('SCRIPT_ID', 'judging_statistics');

define('MAX_LIST_LEN', 10);

/* Expects string formatted as "yyyy-mm-ddTHH:MM#yyyy-mm-ddTHH:MM"
 * and returns an array of two Unix epoch timestamps.
 */
function parse_time_interval($arg)
{
	$res = array();
	if ( !preg_match('/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}'.
	                  '_\d{4}-\d{2}-\d{2}T\d{2}:\d{2}$/', $arg) ) {
		error("Invalid time interval format '$arg'.");
	}
	foreach ( explode('_', $arg) as $str ) $res[] = strtotime($str);
	return $res;
}

// Read options
$opts = getopt('c:l:p:s:t:J:S:vR:');

$sql_where = '';
$restr = array();

// Parse ID list restrictions:
foreach ( array('j.cid'       => 'contest',
                'j.judgehost '=> 'host',
                's.langid'    => 'language',
                's.probid'    => 'problem',
                'j.submitid'  => 'submission',
                's.teamid'    => 'team') as $id => $type ) {
	$char = $type[0];
	if ( isset($opts[$char]) ) {
		$ids = explode(',', $opts[$char]);
		$sql_where .= " AND $id IN (%A" .
		    ( $id=='s.langid' || $id=='j.judgehost' ? 's' : 'i' ) . ")";
	} else {
		$ids = NULL;
		$sql_where .= ' %_';
	}
	$restr[$type] = $ids;
}

// Parse time interval restrictions:
foreach ( array('j.starttime'  => 'judging_start',
                's.submittime' => 'submission_start') as $id => $type ) {
	$char = strtoupper($type[0]);
	if ( isset($opts[$char]) ) {
		$res = parse_time_interval($opts[$char]);
		$sql_where .= " AND $id >= %i and $id < %i ";
	} else {
		$res = array(NULL, NULL);
		$sql_where .= ' %_ %_ ';
	}
	$restr[$type] = $res;
}

// Parse other restrictions:
if ( isset($opts['v']) ) {
	$sql_where .= ' AND j.valid=1 AND s.valid=1 ';
}
$restr['valid'] = isset($opts['v']);


// Needed for accessing the database:
require_once(LIBDIR . '/init.php');
require_once(LIBDIR . '/use_db.php');

setup_database_connection();

$judgings = $DB->q('KEYTABLE SELECT j.judgingid AS ARRAYKEY,
                    j.cid, j.submitid, j.judgehost, j.result, j.starttime,
                    s.langid, s.probid, s.teamid, s.submittime,
                    (j.endtime - j.starttime) AS duration,
                    MIN(r.runtime) AS runtime_min,
                    MAX(r.runtime) AS runtime_max,
                    AVG(r.runtime) AS runtime_avg,
                    COUNT(r.runtime) AS ntestcases
                    FROM judging j
                    LEFT JOIN submission s USING (submitid)
                    LEFT JOIN judging_run r USING (judgingid)
                    WHERE j.endtime IS NOT NULL ' . $sql_where .
                   'GROUP BY j.judgingid ORDER BY j.judgingid ASC',
                   $restr['contest'], $restr['host'], $restr['language'],
                   $restr['problem'], $restr['submission'], $restr['team'],
                   $restr['judging_start'][0],    $restr['judging_start'][1],
                   $restr['submission_start'][0], $restr['submission_start'][1]);

if ( count($judgings)==0 ) {
	echo "Warning: found no judgings satisfying the constraints.\n";
	exit(1);
}

// Create arrays of problem/submission IDs referencing to all
// associated judgings.
$problems = $submissions = $judgehosts = array();
foreach ( $judgings as $jid => &$data ) {
	// First explicit cast to floats where applicable:
	$data['duration']    = (float)$data['duration'];
	$data['runtime_min'] = (float)$data['runtime_min'];
	$data['runtime_max'] = (float)$data['runtime_max'];
	$data['runtime_avg'] = (float)$data['runtime_avg'];

	$problems[   $data['probid']][]    = $jid;
	$submissions[$data['submitid']][]  = $jid;
	$judgehosts[ $data['judgehost']][] = $jid;
}

ksort($problems);
ksort($submissions);

printf("Found %d judgings satisfying the constraints,\n" .
       "in %d problems, %d submissions, and on %d judgehosts.\n\n",
       count($judgings), count($problems), count($submissions), count($judgehosts));

if ( empty($opts['R']) ) {
	printf("No reports specified (with the '-R' option), exiting.\n");
	exit(0);
}

$reports = explode(',',strtolower($opts['R']));

// Report per problem
if ( in_array('problems', $reports) ) {

	$problegend = $DB->q('KEYTABLE SELECT probid AS ARRAYKEY, name, timelimit
	                      FROM problem WHERE probid IN (%Ai)', array_keys($problems));

	echo "Per problem statistics:\n";
	echo "=======================\n\n";

	foreach ( $problems as $probid => $probjids ) {
		$minjid = $maxjid = NULL;
		$njud = 0;
		foreach ( $probjids as $jid ) {
			if ( $judgings[$jid]['result']!='correct' ) continue;
			if ( is_null($minjid) ||
			     $judgings[$jid]['runtime_max']<$judgings[$minjid]['runtime_max'] ) {
				$minjid = $jid;
			}
			if ( is_null($maxjid) ||
			     $judgings[$jid]['runtime_max']>$judgings[$maxjid]['runtime_max'] ) {
				$maxjid = $jid;
			}
			$njud++;
		}

		printf("Problem %d: \"%s\":\n", $probid, $problegend[$probid]['name']);
		if ( $njud==0 ) {
			echo "  *** No correct judgings for this problem. ***\n";
			continue;
		}

		$bestspread  = -1.0;
		foreach ( $submissions[$judgings[$minjid]['submitid']] as $jid ) {
			$spread = $judgings[$jid]['runtime_max'] - $judgings[$minjid]['runtime_max'];
			if ( $spread>$bestspread ) $bestspread = $spread;
		}
		$worstspread = -1.0;
		foreach ( $submissions[$judgings[$maxjid]['submitid']] as $jid ) {
			$spread = $judgings[$jid]['runtime_max'] - $judgings[$maxjid]['runtime_max'];
			if ( $spread>$worstspread ) $worstspread = $spread;
		}

		printf("  timelimit = %ds, runtimes in ( %.3f , %.3f ) sec for %d judgings\n",
		       $problegend[$probid]['timelimit'],
		       $judgings[$minjid]['runtime_max'],
		       $judgings[$maxjid]['runtime_max'], $njud);
		printf("  best  runtime: %.3fs for s%d (j%d), language %s, spread in runtime %.3fs\n",
		       $judgings[$minjid]['runtime_max'],
		       $judgings[$minjid]['submitid'], $minjid,
		       $judgings[$minjid]['langid'], $bestspread);
		printf("  worst runtime: %.3fs for s%d (j%d), language %s, spread in runtime %.3fs\n",
		       $judgings[$maxjid]['runtime_max'],
		       $judgings[$maxjid]['submitid'], $maxjid,
		       $judgings[$maxjid]['langid'], $worstspread);
	}

	echo "\n";
}

// Report variations between judgings for same submissions
if ( in_array('variations', $reports) ) {

	echo "Variations statistics:\n";
	echo "======================\n\n";

	$results_differ = array();
	$judruns_differ = array();
	$runtime_spread = array();
	foreach ( $submissions as $submitid => $jids ) {

		// Check for different results:
		$results = array();
		$runresults = array();
		foreach ( $jids as $jid ) {
			if ( !in_array($judgings[$jid]['result'], $results) ) {
				$results[] = $judgings[$jid]['result'];
			}
			// Check for differences in the list of judging_run results.
			$judruns = $DB->q('KEYVALUETABLE SELECT rank, runresult
			                   FROM judging_run
			                   LEFT JOIN testcase USING(testcaseid)
			                   WHERE judgingid = %i', $jid);
			if ( !in_array($judruns, $runresults) ) {
				$runresults[] = $judruns;
			}

		}
		if ( count($results)!=1 ) {
			$results_differ[] = $submitid;
		} else if ( count($runresults)!=1  ) {
			// Only report differences in judging runs if the final
			// results were the same.
			$judruns_differ[] = $submitid;
		}

		// Check for variations in runtimes across judgings:
		$rows = $DB->q('SELECT r.testcaseid, t.rank,
		                MIN(r.runtime) AS runtime_min,
		                MAX(r.runtime) AS runtime_max,
		                AVG(r.runtime) AS runtime_avg,
		                (MAX(r.runtime)-MIN(r.runtime)) AS runtime_spread,
		                COUNT(j.judgingid) AS njudgings
		                FROM judging_run r
		                LEFT JOIN judging j USING (judgingid)
		                LEFT JOIN testcase t USING (testcaseid)
		                WHERE j.submitid = %i GROUP BY r.testcaseid',
		               $submitid);

		$runtime_spread[$submitid] = array(-1.0, $submitid, -1.0);
		while ( $row = $rows->next() ) {
			$spread = (float)$row['runtime_max'] - (float)$row['runtime_min'];
			if ( $spread > $runtime_spread[$submitid][0] ) {
				$runtime_spread[$submitid][0] = $spread;
				$runtime_spread[$submitid][2] = $row['rank'];
			}
		}

	}

	sort($results_differ);
	rsort($runtime_spread);

	if ( count($results_differ)>0 ) {
		printf("Found %d submissions which have different judging results:\n",
		       count($results_differ));
		foreach ( $results_differ as $submitid ) {
			$results = array();
			foreach ( $submissions[$submitid] as $jid ) {
				$results[$judgings[$jid]['result']][] = $jid;
			}
			printf(" %5s:", "s$submitid");
			foreach ( $results as $result => $jids ) {
				echo " $result(j:" . implode(',', $jids) . ")";
			}
			echo "\n";
		}
		echo "\n";
	}

	if ( count($judruns_differ)>0 ) {
		printf("Found %d submissions which have different judging run results:\n",
		       count($judruns_differ));
		foreach ( $judruns_differ as $submitid ) echo " s$submitid";
		echo "\n";
	}

	printf("Largest spread in testcase runtimes: %.3f sec, top %d:\n",
	       reset($runtime_spread)[0], min(MAX_LIST_LEN,count($runtime_spread)));

	for ($i=0; $i<MAX_LIST_LEN; $i++) {
		if ( !(list($key, $val) = each($runtime_spread)) ) break;
		list($spread, $submitid, $tcid) = $val;
		printf(" %5s/%s: %.3fs over %d judgings with result: %s\n",
		       "s$submitid", "tc$tcid", $spread, count($submissions[$submitid]),
		       (in_array($submitid,$results_differ) ? '*multiple*' :
		        $judgings[$submissions[$submitid][0]]['result']));
	}
	echo "\n";

	printf("Variations between %d judgehosts:\n\n",count($judgehosts));
	printf(" Judgehost              | #judgings | avg. runtime | std.dev. | avg. duration\n");
	printf("-----------------------------------------------------------------------------\n");
	foreach ( $judgehosts as $judgehost => $jids ) {
		$totaltime = 0.0; // Actual time begin--end of judging
		$totalrun  = 0.0; // Time spend juding runs
		$sumsquare = 0.0;
		$njudged = 0;
		foreach ( $jids as $jid ) {
			$runtime = $judgings[$jid]['runtime_avg']*$judgings[$jid]['ntestcases'];
			$totaltime += $judgings[$jid]['duration'];
			$totalrun  += $runtime;
			$sumsquare += $runtime*$runtime;
			$njudged++;
		}
		$avgtime = $totaltime / $njudged;
		$avgrun  = $totalrun  / $njudged;
		// FIXME: variance over all judgings from different problems
		// doesn't make sense.
		$variance = $sumsquare / $njudged - $avgrun*$avgrun;
		printf(" %-22.22s | %9d | %12.4f | %8.3f | %12.4f \n",
		       $judgehost, $njudged, $avgrun, sqrt($variance), $avgtime);
	}
	echo "\n";

}

// Report misc. statistics
if ( in_array('misc', $reports) ) {

	echo "Miscellaneous statistics:\n";
	echo "=========================\n\n";

	$rows = $DB->q('SELECT submitid, MIN(judgingid), submittime,
	                MIN(starttime) - submittime AS timediff, COUNT(judgingid)
	                FROM submission s
	                INNER JOIN judging USING (submitid)
	                WHERE submitid IN (%As)
	                GROUP BY submitid HAVING timediff > 5
	                ORDER BY timediff DESC', array_keys($submissions));

	if ( $rows->count()==0 ) {
		printf("No submissions with judgings delayed by 5+ seconds.\n\n");
	} else {
		printf("Found %d submissions with judging delayed by 5+ seconds, top %d:\n",
		       $rows->count(), min(MAX_LIST_LEN,$rows->count()));
		for ($i=0; $i<MAX_LIST_LEN; $i++) {
			if ( !($row = $rows->next()) ) break;
			printf(" %5s: submitted %s, first judged %.2fs later\n",
			       's'.$row['submitid'], strftime('%F %T',$row['submittime']),
			       $row['timediff']);
		}
		echo "\n";
	}
}

echo "Done.\n";
exit;
