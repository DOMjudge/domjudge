#!/usr/bin/env php
<?php
/**
 * @configure_input@
 *
 * Program to rejudge every judging on each judgehost once, useful in
 * combination with statistics.
 *
 * Part of the DOMjudge Programming Contest Jury System and licenced
 * under the GNU GPL. See README and COPYING for details.
 */
if ( isset($_SERVER['REMOTE_ADDR']) ) die ("Commandline use only");

$waittime = 30;

require('@domserver_etcdir@/domserver-static.php');
require(ETCDIR . '/domserver-config.php');

define('SCRIPT_ID', 'multi_rejudge');
define('LOGFILE', LOGDIR.'/multi_rejudge.log');

require(LIBDIR . '/init.php');

function usage()
{
	echo "Usage: " . SCRIPT_ID . " -C <cid>";
	exit;
}

$options = getopt("C:v:hV");
// With PHP version >= 5.3 we can also use long options.
// FIXME: getopt doesn't return FALSE on parse failure as documented!
if ( $options===FALSE ) {
	echo "Error: parsing options failed.\n";
	usage();
}

if ( isset($options['C']) ) $options['cid']     = $options['C'];
if ( isset($options['v']) ) $options['verbose'] = $options['v'];

if ( isset($options['V']) ) version();
if ( isset($options['h']) ) usage();

setup_database_connection();

$cids = getCurContests();
$cid = NULL;
if ( count($cids)==1 ) $cid = reset($cids);
if ( isset($options['cid']) ) $cid = $options['cid'];
if ( $cid===NULL ) {
	error("No contest ID specified and no unique active contest found.");
}

$numact_jh = $DB->q('VALUE SELECT COUNT(*) FROM judgehost WHERE active=1');

$RESTRICTION = '{"contest":[],"problem":[],"language":[],"rejudge_own":"0"}';

$restrict_id = $DB->q('MAYBEVALUE SELECT restrictionid FROM judgehost_restriction
                       WHERE restrictions = %s', $RESTRICTION);

if ( empty($restrict_id) ) {
	$restrict_id = $DB->q('RETURNID INSERT INTO judgehost_restriction (name, restrictions)
	                       VALUES (%s, %s)', 'not self, for statistics', $RESTRICTION);
}

// FIXME: save old restrictions first?
// note that this may be tricky since you would have to combine the old
// restrictions with the new one
// restrict judgehost not to judge same submission again
$DB->q('UPDATE judgehost SET restrictionid = %i', $restrict_id);

while ( TRUE ) {
	while ( TRUE ) {
		$jud_cnt = $DB->q('VALUE SELECT COUNT(*)
		                   FROM judging
		                   WHERE cid=%i AND result IS NULL AND valid=1', $cid);
		$sub_cnt = $DB->q('VALUE SELECT COUNT(*)
		                   FROM submission
		                   WHERE cid=%i AND judgehost IS NULL AND valid=1', $cid);
		$cnt = $jud_cnt + $sub_cnt;
		if ( $cnt == 0 ) {
			break;
		}
		echo "$cnt more judging(s) to go in this round\n";
		sleep(10);
	}

	$min_numjudgings = $DB->q('MAYBEVALUE SELECT COUNT(*) AS numj
	                           FROM judging j
	                           LEFT JOIN submission s USING(submitid)
	                           WHERE s.cid=%i AND s.valid=1
	                           GROUP BY submitid
	                           ORDER BY numj LIMIT 1', $cid);
	if ( !empty($min_numjudgings) && $min_numjudgings == $numact_jh ) {
		// we are done
		break;
	}

	echo "\n" . ($numact_jh - $min_numjudgings) . " more round(s) to go\n";

	$rows = $DB->q('SELECT submitid,COUNT(*) AS cnt
	                FROM judging
	                WHERE cid=%i AND valid=1
	                GROUP BY submitid', $cid);
	while ( $row = $rows->next() ) {
		if ( $row['cnt'] >= $numact_jh ) {
			// assume it's done by now
			// note that this might be slightly incorrect since a
			// submission may have been judged multiple times
			// before running this script on the same judgehost
			continue;
		}

		$sid = $row['submitid'];

		echo ".";
		$DB->q('START TRANSACTION');
		$DB->q('UPDATE judging SET valid = 0 WHERE submitid = %i', $sid);
		$DB->q('UPDATE submission SET judgehost = NULL WHERE submitid = %i', $sid);
		$DB->q('COMMIT');
	}
	echo "\n";

}

// remove new judgehost restriction
// FIXME: restore old one
$DB->q('UPDATE judgehost SET restrictionid = NULL');

exit;
