#!/bin/sh
#
# Script to run a command or shell inside a chroot environment
# prebuilt with the dj_make_chroot script.
#
# Part of the DOMjudge Programming Contest Jury System and licensed
# under the GNU GPL. See README and COPYING for details.

# Abort when a single command fails:
set -e

# shellcheck source=./misc-tools/dj_chroot_functions
. "$(dirname $0)/dj_chroot_functions"

trap cleanup EXIT

usage()
{
    cat <<EOF
Usage: $0 [options]... [command]
Runs <command> inside the prebuilt chroot environment. If no command is
given, then an interactive shell inside the chroot is started.

Options:
  -d <dir>    Directory of the prebuild chroot (if not default).
  -h          Display this help.

This script must be run as root. It mounts proc, sysfs and devpts
before starting the chroot, and unmounts those afterwards. This script
can be used, for example, to upgrade or install new packages in the
chroot:

  sudo dj_run_chroot "apt update && apt upgrade"

If you want to install local packages, make sure to first copy those
into the chroot tree, and then e.g. run:

  sudo dj_run_chroot "dpkg -i /path/inside/chroot/package_x.y.z_amd64.deb"

EOF
}

# Read command-line parameters:
while getopts 'd:h' OPT ; do
    case $OPT in
        d) CHROOTDIR=$OPTARG ;;
        h) SHOWHELP=1 ;;
        \?) error "Could not parse options." ;;
    esac
done
shift $((OPTIND-1))

check_showhelp
check_rootuser

if [ $# -eq 0 ]; then
    INTERACTIVE=1
fi

[ -z "$CHROOTDIR" ] && error "No chroot directory given nor default known."
[ -d "$CHROOTDIR" ] || error "Chrootdir '$CHROOTDIR' does not exist."

cd "$CHROOTDIR"
CHROOTDIR="$PWD"

mount_host_special_files

# Prevent perl locale warnings in the chroot:
export LC_ALL=C

[ -n "$INTERACTIVE" ] && echo "Entering chroot in '$CHROOTDIR'."

if [ -n "$INTERACTIVE" ]; then
    chroot "$CHROOTDIR"
else
    chroot "$CHROOTDIR" /bin/sh -c "$*"
fi

normal_cleanup

[ -n "$INTERACTIVE" ] && echo "Exited chroot in '$CHROOTDIR'."
exit 0
