name: Check autoconf
on:
  merge_group:
  pull_request:
    branches:
      - main
      - '[0-9]+.[0-9]+'

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: domjudge/gitlabci:24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Create the distribution tarball
        run: |
          make dist
          cd ..
          mv domjudge release
          mkdir domjudge #Workdir for next steps
          tar -cf release.tar release
          gzip -9 release.tar
          mv release.tar.gz domjudge/
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          compression-level: 0
          name: test-tarball
          path: ${{ github.workspace }}/release.tar.gz

  gentoo-family:
    needs: build
    strategy:
      matrix:
        version: [latest]
        os: [gentoo/portage]
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.os }}:${{ matrix.version }}
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: test-tarball
      - name: Install git so we get the .github directory
        run: emerge dev-vcs/git
      - name: Unpack the "Release" tarball
        run: tar xvf release.tar.gz
      - name: Setup image and run bats tests
        working-directory: release
        run: .github/jobs/configure-checks/setup_configure_image.sh

  suse-family:
    needs: build
    strategy:
      matrix:
        version: [latest]
        os: [opensuse/tumbleweed]
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.os }}:${{ matrix.version }}
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: test-tarball
      - name: Install git so we get the .github directory
        run: zypper install -y git
      - name: Unpack the "Release" tarball
        run: tar xvf release.tar.gz
      - name: Setup image and run bats tests
        working-directory: release
        run: .github/jobs/configure-checks/setup_configure_image.sh

  arch-family:
    needs: build
    strategy:
      matrix:
        version: [latest]
        os: [archlinux]
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.os }}:${{ matrix.version }}
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: test-tarball
      - name: Install git so we get the .github directory
        run: pacman -Sy git
      - name: Unpack the "Release" tarball
        run: tar xvf release.tar.gz
      - name: Setup image and run bats tests
        working-directory: release
        run: .github/jobs/configure-checks/setup_configure_image.sh

  redhat-family:
    needs: build
    strategy:
      matrix:
        version: [latest]
        os: [fedora]
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.os }}:${{ matrix.version }}
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: test-tarball
      - name: Install git so we get the .github directory
        run: dnf install -y git
      - name: Unpack the "Release" tarball
        run: tar xvf release.tar.gz
      - name: Setup image and run bats tests
        working-directory: release
        run: .github/jobs/configure-checks/setup_configure_image.sh

  debian-family:
    needs: build
    strategy:
      matrix:
        version: [jammy, focal, rolling]
        os: [ubuntu]
        releaseBranch:
          - ${{ contains(github.ref, 'gh-readonly-queue') }}
        exclude:
          - releaseBranch: false
        include:
          - os: debian
            version: stable
          - os: debian
            version: testing
    runs-on: ubuntu-latest
    env:
      DEBIAN_FRONTEND: noninteractive
      TZ: Etc/UTC
    container:
      image: ${{ matrix.os }}:${{ matrix.version }}
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: test-tarball
      - name: Install git so we get the .github directory
        run: |
          apt-get update
          apt-get install -y git
      - name: Unpack the "Release" tarball
        run: |
          ls -atrl
          tar xvf release.tar.gz
      - name: Setup image and run bats tests
        working-directory: release
        run: .github/jobs/configure-checks/setup_configure_image.sh

#  debian-family:
#    needs: build
#    strategy:
#      matrix:
#        version: [jammy, focal, rolling]
#        os: [ubuntu]
#        releaseBranch:
#          - ${{ contains(github.ref, 'gh-readonly-queue') }}
#        exclude:
#          - releaseBranch: false
#        include:
#          - os: debian
#            version: stable
#          - os: debian
#            version: testing
#    runs-on: ubuntu-latest
#    env:
#      DEBIAN_FRONTEND: noninteractive
#      TZ: Etc/UTC
#    container:
#      image: ${{ matrix.os }}:${{ matrix.version }}
#    steps:
#      - name: Download Artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: test-tarball
#      - name: Install git so we get the .github directory
#        run: |
#          apt-get update
#          apt-get install -y git
#      - name: Unpack the "Release" tarball
#        run: |
#          ls -atrl
#          tar xvf release.tar.gz
#      - name: Setup image and run bats tests
#        working-directory: domjudge
#        run: .github/jobs/configure-checks/setup_configure_image.sh
#
## Copy the fedora stuff here and use:
## if: github.event_name != 'merge_group' on the job level
##name: Build and Trigger Workflows
### Either just filter the fedora stuff in onther build step (and run on main but skip) or trigger 2 workflows. I don't work enough with GHA to see which one I prefer for now.
##
##on:
##  push:
##    branches:
##      - main
##
##jobs:
##  build:
##    name: Build Artifact
##    runs-on: ubuntu-latest
##
##    steps:
##      - name: Checkout code
##        uses: actions/checkout@v4
##
##      - name: Build project
##        run: |
##          # Example build command
##          mkdir -p build
##          echo "Artifact content" > build/artifact.txt
##
##      - name: Upload artifact
##        uses: actions/upload-artifact@v4
##        with:
##          name: my-artifact
##          path: build/artifact.txt
##
##
##      - name: Trigger workflow 2
##        run: |
##          curl -X POST \
##            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
##            -H "Accept: application/vnd.github+json" \
##            https://api.github.com/repos/${{ github.repository }}/actions/workflows/workflow_2.yml/dispatches \
##            -d '{"ref":"main"}'
##
##
