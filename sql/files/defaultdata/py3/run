#!/bin/sh

# Python3 compile wrapper-script for 'compile.sh'.
# See that script for syntax and more info.
#
# This script does not actually "compile" the source, but writes a
# shell script that will function as the executable: when called, it
# will execute the source with the correct interpreter syntax, thus
# allowing this interpreted source to be used transparently as if it
# was compiled to a standalone binary.
# Note that from version 8.0.0 the default Python 3 interpreter is
# pypy 3 instead of CPython 3.
#
# This script requires that pypy3 is installed in the chroot.

DEST="$1" ; shift
MEMLIMIT="$1" ; shift
MAINSOURCE="${ENTRY_POINT:-$1}"

# Report the entry point, so it can be saved, e.g. for later replay:
if [ -z "$ENTRY_POINT" ]; then
    echo "Info: detected entry_point: $MAINCLASS"
fi

# Check syntax
pypy3 -m py_compile "$@"
EXITCODE=$?
[ "$EXITCODE" -ne 0 ] && exit $EXITCODE
rm -f -- *.pyc
rm -rf -- __pycache__

# Check if entry point is valid
if [ ! -r "$MAINSOURCE" ]; then
    echo "Error: main source file '$MAINSOURCE' is not readable" >&2
    exit 1
fi

# Write executing script:
cat > "$DEST" <<EOF
#!/bin/sh
# Generated shell-script to execute python interpreter on source.

# Detect dirname and change dir to prevent class not found errors.
if [ "\${0%/*}" != "\$0" ]; then
	cd "\${0%/*}"
fi

# set non-existing HOME variable to make python happy
export HOME=/does/not/exist

# Uncomment the line below if you want it make easier for teams to do local
# debugging.
# export ONLINE_JUDGE=1 DOMJUDGE=1

exec pypy3 "$MAINSOURCE" "\$@"
EOF

chmod a+x "$DEST"

exit 0
